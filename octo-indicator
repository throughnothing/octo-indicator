#!/usr/bin/env python
import appindicator
import gobject
import gtk

import ConfigParser
import feedparser
import github2.client as gh
import os
import webbrowser

GH_FEED_UPDATE_INTERVAL=1000*60*10 # 10 minutes
GH_FEED_ITEMS=30

class OctoIndicator(object):
    def __init__(self):
        self.config = ConfigParser.ConfigParser()
        self.config.read(os.path.join(os.path.expanduser('~'),'.octoindicatorrc'))
        self.gh_user=self.config.get('github','user')
        self.gh_token=self.config.get('github','token')
        self.latest_entry_id = ''
        if not self.gh_user or not self.gh_token:
            raise Exception('User or Token could not be found in ~/.octoindicatorrc') 
        self.gh_feed_url = ("https://github.com/%s.private.atom?token=%s" % 
            (self.gh_user, self.gh_token))
    
    def run(self):
        cwd = os.getcwd()
        self.ind = appindicator.Indicator ("octo-indicator",
                                  os.path.join(cwd,"octocat.png"),
                                  appindicator.CATEGORY_COMMUNICATIONS)
        self.ind.set_status (appindicator.STATUS_ACTIVE)
        self.ind.set_attention_icon (os.path.join(cwd,"octocat-active.png"))

        # create a menu
        self.menu = gtk.Menu()
        clear_item = gtk.MenuItem('Mark all as seen')
        self.menu.append(clear_item)
        clear_item.connect("activate", self.mark_read_click)
        
        #Separator
        separator_item = gtk.SeparatorMenuItem()
        self.menu.append(separator_item)

        separator_item.show()
        clear_item.show()

        # Get initial feed
        self.update_feed()

        self.ind.set_menu(self.menu)

        gtk.main()

    def update_feed(self):
        gh_feed = feedparser.parse(self.gh_feed_url)
        for entry in gh_feed['entries']:
            if entry['id'] == self.latest_entry_id:
                self.latest_entry_id = entry['id']
                break

            self.ind.set_status (appindicator.STATUS_ATTENTION)

            self.latest_entry_id = entry['id']
            t = entry['title_detail']['value']
            menu_item = gtk.MenuItem(t)
            self.menu.append(menu_item)
            menu_item.connect("activate", self.feeditem_click,entry)
            menu_item.show()

        # Clear old entries
        cur_menu_items = self.menu.get_children()
        for i in range(GH_FEED_ITEMS,len(cur_menu_items) - 2):
            self.menu.remove(cur_menu_items[i])

        gtk.timeout_add(GH_FEED_UPDATE_INTERVAL, self.update_feed)

    def feeditem_click(self, w, entry):
        self.ind.set_status (appindicator.STATUS_ACTIVE)
        webbrowser.open(entry['links'][0]['href'])

    def mark_read_click(self, w):
        self.ind.set_status (appindicator.STATUS_ACTIVE)


if __name__ == "__main__":
    oi = OctoIndicator()
    oi.run()

